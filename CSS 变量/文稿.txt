
http://www.ruanyifeng.com/blog/2017/05/css-variables.html
https://www.youtube.com/watch?v=8Yum7EQgadM&list=PL4cUxeGkcC9ii5PB2UMyYH7QFZWfGnVgZ
https://github.com/iamshaunjp/CSS-Variables
第一节课：

我之所以要分享 CSS 变量这个系列，是因为，当我们日后在处理大型的网站时，CSS 变量会派上用场。


假设 我们一个项目是很庞大的时候，会有很多样式吧。对于，某个主题，因为颜色要统一，所以我们可能一遍
又一遍的重复写着某些字体颜色和字体大小或边距等。

例如，我们，三种不同的规则（但实际中可能了20种），假设，哪天我们想更改网站的外面，那么我们都需要一个一个的把这些颜色改一遍。假设有50个地方用到这个颜色，那我们得改 50次，这显然是不科学的。

一种解决方案就是使用 变量来存储这些颜色值，如果哪天需要更改，我们只更改变量的值即可。这样，我们只需更改一次即可。这样对于我们开发来说才是有意义的事。


现在，可以使用 sass 或 less 来定义 css变量来完成 此操作，但是，并不是每个项目都会用到这些技术栈。除了这两个之处，我们还可以使用 CSS 变量，。 CSS 变量除了可以存储简单的值 ，还可以做更多的事情。


CSS 变量也称为 自定义属性
声明变量的时候，变量名前面要加两根连词线（--）

你可能会问，为什么选择两根连词线（--）表示变量？因为$foo被 Sass 用掉了，@foo被 Less 用掉了。为了不产生冲突，官方的 CSS 变量就改用两根连词线了。



最后来说下浏览器的支持情况 ，从 can i use 中可以看出，所有的主流浏览器都 支持了，可以我们可以大胆的使用。


好了，那这节课就主要介绍这些了，我们下节课 再见。886




第二节课

回到vscod ，我们打开 上节课提前准备的代码，首先，我会把 css 变量的声音都 放在这个状况区域，因为这样看起来比较清晰。

上节课我们介绍到 css 变量就是css 自定义属性，如 font-family: Verdana; 但他们的前面没有双连线。

就像普通 的 CSS 属性一样，css 变量的声明必须放在选择器里面。所以我们不能直接 在顶部声明一个变量，比如：

--my-var: red
{}
这样是无法工作的，我们需要放在选择器里面。比如说我们放在 body 内部，这意味着 body 标签里面的所有内容都可以访问该变量。

如果在 header 里面声明了变量，则 header 标签里面的所有内容都可以访问该变量。

知道了作用域的规则后，我们就比较明确知道要在哪个作用域里面声明，

假设，我们希望所有的标签都 有访问的我们的变量，那可以在 :root 里面该变量，如

:root{

}

这里我们需要在 root 里面声明两个变量 一个主题颜色 和一个链接的颜色。这里看网页。

:root{
  --theme-color: #3e84da;
}

.banner {
  background: var( --theme-color);
}

.spot h2{  color: var( --theme-color);    }

然后刷新一下页面，还是原来的样子。接着是连接的颜色

:root{
  --theme-color: #3e84da;
  --link-color: #daa33e;
}


nav a{
    color: var(--link-color);
}

.content a{
    color: var(--link-color);
}


这很酷，我们使用的变量替换了一些颜色值，这看起来好像也没有为我们节省多少时间。

但是当我们想要改变主题的颜色或者 链接的颜色的时候。我们这里虽然只有两处，但在大型的网站上可能有10多个地方。
我们可以这样改：

:root{
    --theme-color: pink
    --link-color: #daa33e;
}
刷新看看，可以看到我们只改了一个地方，对应的主题变量的地方都一下就全都 变了。然后，我们改变一下链接的颜色：
:root{
    --theme-color: pink
    --link-color: #333
}

页面上的链接也跟着变了，这就是 css 变量的强大之处。使我们在更新网站的样式变得更加的轻松。

下节课，我们将会介绍一个 css 变量 比 sass ,less变量 更好用的地方。




第二节课   CSS 变量的好处

这节课来介绍一下 css 变量 比 sass和 less 变量更好用的地方。 

第一点最明显的就是 sass 和less 两者都需要转换成 css 这样浏览器才能解析。但 css 变量是不用的，所以css变量比 sass less 的一个好处就是少了一次转换。


因为 sass 和 less 都 需要 被转制成 css 浏览器 才能解析，所以我们在浏览器是不能直接调试 sass 和 less 的，但css 变量是可以直接调试的



比如我们可以直接 使用 f12 在浏览器上直接 调试， 我们可以看到上节课程声明的 两个 css 变量，如果是使用 sass 或者 less 我们是无法在这里修改的，因为它们需要被转译成css 浏览器才能理解。

所以 css 变量 相对 sass 和less 的另一个好处。


那还有什么好处呢，

我们可以在 媒体查询中覆盖 css 变量 ，但在 sass  和 less 中是很难做到的。


:root{
  --layout: 1fr 1fr 1fr;
}

@media screen and (max-width: 760px) ｛
   :root{
    --layout: 1fr；
  }
}

   grid-template-columns: var(--layout)


这样我们就很容易根据 媒体查询来覆盖对应的原有的 css 变量，但在ass 和 less 是很难做到的。



接着，我们来讲css 变量的最后一个好处，我们可以在确定的作用域来覆盖css变量。


nav{
  --link-color: #333;
}

在sass 或者 less 是很难做到这样的，除非使用了 mixin 或者 其它 操作 但在 csss 变量中就非常的简单。

出于这些原因，相比 sass less 变量，我更喜欢 css 变量。


















